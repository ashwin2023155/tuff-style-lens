
import { useState, useRef } from "react";
import { AppLayout } from "@/components/AppLayout";
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Camera, Upload, Image, RefreshCw } from "lucide-react";
import { toast } from "sonner";
import { motion } from "framer-motion";
import { OutfitCard } from "@/components/OutfitCard";

// Mock outfits to try on
const mockOutfits = [
  {
    id: 1,
    title: "Casual Summer",
    image: "https://images.unsplash.com/photo-1515886657613-9f3515b0c78f"
  },
  {
    id: 2,
    title: "Business Casual",
    image: "https://images.unsplash.com/photo-1603251579643-acb2967f5e2c"
  },
  {
    id: 3,
    title: "Smart Casual",
    image: "https://images.unsplash.com/photo-1616691439307-68493887ab26"
  },
  {
    id: 4,
    title: "Casual Formal",
    image: "https://images.unsplash.com/photo-1632149877166-f75d49000351"
  }
];

const VirtualTryOnPage = () => {
  const [userImage, setUserImage] = useState<string | null>(null);
  const [selectedOutfit, setSelectedOutfit] = useState<number | null>(null);
  const [isProcessing, setIsProcessing] = useState(false);
  const [result, setResult] = useState<string | null>(null);
  const fileInputRef = useRef<HTMLInputElement>(null);
  
  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (!file) return;
    
    if (!file.type.startsWith("image/")) {
      toast.error("Please upload an image file");
      return;
    }
    
    const reader = new FileReader();
    reader.onload = () => {
      setUserImage(reader.result as string);
      setResult(null);
    };
    reader.readAsDataURL(file);
  };
  
  const handleUploadClick = () => {
    fileInputRef.current?.click();
  };
  
  const handleOutfitSelect = (id: number) => {
    setSelectedOutfit(id);
  };
  
  const handleTryOn = () => {
    if (!userImage || selectedOutfit === null) {
      toast.error(userImage ? "Please select an outfit to try on" : "Please upload your photo first");
      return;
    }
    
    setIsProcessing(true);
    
    // Simulate processing delay
    setTimeout(() => {
      setIsProcessing(false);
      // In a real app, this would be generated by the AI
      // Here we just show the selected outfit as a placeholder
      setResult(mockOutfits.find(outfit => outfit.id === selectedOutfit)?.image || null);
      toast.success("Virtual try-on completed!");
    }, 2000);
  };
  
  const resetAll = () => {
    setUserImage(null);
    setSelectedOutfit(null);
    setResult(null);
  };
  
  return (
    <AppLayout title="Virtual Try-On">
      <div className="max-w-4xl mx-auto space-y-8">
        <div className="text-center space-y-2 mb-8">
          <h1 className="text-3xl font-bold">Virtual Try-On</h1>
          <p className="text-muted-foreground">
            Upload your photo and try on different outfits virtually
          </p>
        </div>
        
        <Tabs defaultValue="upload" className="w-full">
          <TabsList className="grid w-full grid-cols-2">
            <TabsTrigger value="upload">Upload Photo</TabsTrigger>
            <TabsTrigger value="camera">Use Camera</TabsTrigger>
          </TabsList>
          
          <TabsContent value="upload" className="mt-4">
            <Card>
              <CardContent className="p-6">
                <input
                  type="file"
                  accept="image/*"
                  className="hidden"
                  ref={fileInputRef}
                  onChange={handleFileChange}
                />
                
                {!userImage ? (
                  <div 
                    className="image-upload-container aspect-square flex flex-col items-center justify-center"
                    onClick={handleUploadClick}
                  >
                    <Image className="h-12 w-12 text-muted-foreground mb-4" />
                    <p className="text-lg font-medium">Upload a full-body photo</p>
                    <p className="text-sm text-muted-foreground">
                      Make sure your entire body is visible for best results
                    </p>
                  </div>
                ) : (
                  <div className="relative">
                    <img
                      src={userImage}
                      alt="Your photo"
                      className="w-full aspect-auto object-contain rounded-md"
                    />
                    <Button
                      variant="outline"
                      size="sm"
                      className="absolute top-2 right-2"
                      onClick={handleUploadClick}
                    >
                      Change Photo
                    </Button>
                  </div>
                )}
              </CardContent>
            </Card>
          </TabsContent>
          
          <TabsContent value="camera" className="mt-4">
            <Card>
              <CardContent className="p-6 text-center">
                <Camera className="h-12 w-12 text-muted-foreground mx-auto mb-4" />
                <p className="text-lg font-medium mb-4">Take a photo using your camera</p>
                <Button variant="outline" size="lg">
                  <Camera className="mr-2 h-4 w-4" /> Open Camera
                </Button>
                <p className="text-sm text-muted-foreground mt-4">
                  Stand about 6 feet away from the camera in good lighting
                </p>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
        
        {userImage && !result && (
          <div className="space-y-6 animate-fade-in">
            <h2 className="text-xl font-bold text-center">Select an outfit to try on</h2>
            
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
              {mockOutfits.map((outfit) => (
                <motion.div 
                  key={outfit.id}
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                  className={`cursor-pointer rounded-lg overflow-hidden border-2 ${
                    selectedOutfit === outfit.id ? "border-primary" : "border-transparent"
                  }`}
                  onClick={() => handleOutfitSelect(outfit.id)}
                >
                  <img 
                    src={outfit.image} 
                    alt={outfit.title}
                    className="w-full aspect-[3/4] object-cover"
                  />
                  <p className="text-center py-2 font-medium">{outfit.title}</p>
                </motion.div>
              ))}
            </div>
            
            <div className="flex justify-center">
              <Button 
                size="lg" 
                disabled={isProcessing || selectedOutfit === null}
                onClick={handleTryOn}
              >
                {isProcessing ? (
                  <>
                    <RefreshCw className="mr-2 h-4 w-4 animate-spin" />
                    Processing...
                  </>
                ) : (
                  <>Try On This Outfit</>
                )}
              </Button>
            </div>
          </div>
        )}
        
        {result && (
          <div className="space-y-6 animate-fade-in">
            <h2 className="text-xl font-bold text-center">Your Virtual Try-On Result</h2>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <Card>
                <CardContent className="p-4">
                  <p className="font-medium mb-2 text-center">Original Photo</p>
                  <img 
                    src={userImage!} 
                    alt="Original photo" 
                    className="w-full aspect-auto object-contain rounded-md"
                  />
                </CardContent>
              </Card>
              
              <Card>
                <CardContent className="p-4">
                  <p className="font-medium mb-2 text-center">With Selected Outfit</p>
                  <img 
                    src={result} 
                    alt="Try-on result" 
                    className="w-full aspect-auto object-contain rounded-md"
                  />
                </CardContent>
              </Card>
            </div>
            
            <div className="flex justify-center gap-4">
              <Button variant="outline" size="lg" onClick={resetAll}>
                Try Another Photo
              </Button>
              <Button 
                size="lg" 
                onClick={() => setSelectedOutfit(null)}
              >
                Try Another Outfit
              </Button>
            </div>
          </div>
        )}
      </div>
    </AppLayout>
  );
};

export default VirtualTryOnPage;
